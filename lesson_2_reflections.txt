Q-1 -> What happens when you initialize a repository? Why do you need to do it?
A-1 -> Git create new repository. It create .git directory in the working directory. In git repository we can add files that we want to track the changes on.

Q-2 -> How is the staging area different from the working directory and the repository? What value do you think it offers?
A-2 -> Staging area is intermediate area between working directory and repository. It's great space to use. We can work on multiple files and can choose what files to stage and eventually commit to git repository. Only the files we add to stage we can commit to repository. So it's kind of provide the ability to commit selected files even though more files are checked out.

Q-3 -> How can you use the staging area to make sure you have one commit per logical change?
A-3 -> I can compare the working directory changes and version in staging area (its snapshot of most recent commit in repository) and make sure that I'm only going to commit one logical change.

Q-4 -> What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A-4 -> Branches let us work on new features, experimental ideas without breaking the main code in master branch.

Q-5 -> How do the diagrams help you visualize the branch structure?
A-5 -> Diagrams are good representation of how commit look like in different nodes. Also, it helps determine the reachability.

Q-6 -> What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A-6 -> Merging two branches create one new commit (node in diagram) that is parent to both of the merged branches.

Q-7 -> What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A-7 -> Automatic merging saves time and manual effort but it does not provide too much control to the programmer.

